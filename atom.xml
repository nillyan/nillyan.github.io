<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>story of nill</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-13T13:35:15.584Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nill Yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>笔记-Redis 字典结构</title>
    <link href="http://yoursite.com/2017/04/02/redis_%E5%AD%97%E5%85%B8%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/04/02/redis_字典实现笔记/</id>
    <published>2017-04-02T14:08:07.000Z</published>
    <updated>2019-11-13T13:35:15.584Z</updated>
    
    <content type="html"><![CDATA[<h4 id="这篇笔记主要记录Redis字典结构的主要实现，hash过程-解决hash冲突的方式以及rehash的过程。"><a href="#这篇笔记主要记录Redis字典结构的主要实现，hash过程-解决hash冲突的方式以及rehash的过程。" class="headerlink" title="这篇笔记主要记录Redis字典结构的主要实现，hash过程,解决hash冲突的方式以及rehash的过程。"></a>这篇笔记主要记录Redis字典结构的主要实现，hash过程,解决hash冲突的方式以及rehash的过程。</h4><h3 id="Dict-主要结构"><a href="#Dict-主要结构" class="headerlink" title="Dict 主要结构"></a>Dict 主要结构</h3><p>Redis源码中对于hash结构的定义位于dict.h中，其中dict结构定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">typedef struct dict &#123;</div><div class="line">    dictType *type;</div><div class="line">    void *privdata;</div><div class="line">    dictht ht[2];</div><div class="line">    long rehashidx; /* rehashing not in progress if rehashidx == -1 */</div><div class="line">    unsigned long iterators; /* number of iterators currently running */</div><div class="line">&#125; dict;</div></pre></td></tr></table></figure></p><p>该结构中有两个关键属性ht[2] 和rehashidx。</p><ul><li>ht属性是一个包含两个元素的数组，每个元素都是一个dictht哈希表。在非rehash阶段，redis的字典只会操作ht[0],当需要进行rehash操作时，才会同时使用到ht[1]。</li><li>rehashidx属性用来记录rehash当前的进度，在非rehash阶段，该值=-1。</li></ul><p>其中dictht 结构定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef struct dictht &#123;</div><div class="line">    dictEntry **table;</div><div class="line">    unsigned long size;</div><div class="line">    unsigned long sizemask;</div><div class="line">    unsigned long used;</div><div class="line">&#125; dictht;</div></pre></td></tr></table></figure></p><p>正常状态下（非rehash阶段）字典的key-value都存储在ht[0]中。</p><h3 id="Hash过程"><a href="#Hash过程" class="headerlink" title="Hash过程"></a>Hash过程</h3><p>当有新的key-value需要存储时Redis计算哈希值和索引值的方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 使用字典设置的哈希函数，计算键 key 的哈希值</div><div class="line">hash = dict-&gt;type-&gt;hashFunction(key);</div><div class="line"># 使用哈希表的 sizemask 属性和哈希值，计算出索引值</div><div class="line"># 根据情况不同， ht[x] 可以是 ht[0] 或者 ht[1]</div><div class="line">index = hash &amp; dict-&gt;ht[x].sizemask;</div></pre></td></tr></table></figure></p><h5 id="关于hash算法——Redis4-0-0版本开始算法已经从MurmurHash2更改为SipHash。（关于hash算法相关的内容会在后面的笔记中讲到。）"><a href="#关于hash算法——Redis4-0-0版本开始算法已经从MurmurHash2更改为SipHash。（关于hash算法相关的内容会在后面的笔记中讲到。）" class="headerlink" title="关于hash算法——Redis4.0.0版本开始算法已经从MurmurHash2更改为SipHash。（关于hash算法相关的内容会在后面的笔记中讲到。）"></a>关于hash算法——Redis4.0.0版本开始算法已经从MurmurHash2更改为SipHash。（关于hash算法相关的内容会在后面的笔记中讲到。）</h5><h3 id="Hash冲突"><a href="#Hash冲突" class="headerlink" title="Hash冲突"></a>Hash冲突</h3><p>当两个或者以上的key通过hash分配到同一个index时，会出现hash冲突。Redis中解决hash冲突的方式为链地址法：每个hash表节点都有一个next指针，出现冲突的其他节点就可以利用该指针存储在单链表中。</p><h3 id="Rehash过程"><a href="#Rehash过程" class="headerlink" title="Rehash过程"></a>Rehash过程</h3><p>由于redis字典保存的键值对数量会动态变化，为了让hash表的负载因子维持一个合理的范围，当保存的键值对过大或者过小时，需要对哈希表的大小进行动态的扩展或收缩。该过程通过执行rehash的操作来完成。在Redis中这个rehash的动作并不是一次性操作整个ht[0]的节点，而是分批次的，渐进式的完成。<br>以扩展操作为例，Redis中通过dictExpand()实现，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">    /* 根据相关触发条件扩展字典 */</div><div class="line">static int _dictExpandIfNeeded(dict *d) </div><div class="line">&#123; </div><div class="line">    if (dictIsRehashing(d)) return DICT_OK;  // 如果正在进行Rehash，则直接返回</div><div class="line">    if (d-&gt;ht[0].size == 0) return dictExpand(d, DICT_HT_INITIAL_SIZE);  // 如果ht[0]字典为空，则创建并初始化ht[0]  </div><div class="line">    /* (ht[0].used/ht[0].size)&gt;=1前提下，</div><div class="line">       当满足dict_can_resize=1或ht[0].used/t[0].size&gt;5时，便对字典进行扩展 */</div><div class="line">    if (d-&gt;ht[0].used &gt;= d-&gt;ht[0].size &amp;&amp; </div><div class="line">        (dict_can_resize || </div><div class="line">         d-&gt;ht[0].used/d-&gt;ht[0].size &gt; dict_force_resize_ratio)) </div><div class="line">    &#123; </div><div class="line">        return dictExpand(d, d-&gt;ht[0].used*2);   // 扩展字典为原来的2倍</div><div class="line">    &#125; </div><div class="line">    return DICT_OK; </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">/* 计算存储Key的bucket的位置 */</div><div class="line">static int _dictKeyIndex(dict *d, const void *key) </div><div class="line">&#123; </div><div class="line">    unsigned int h, idx, table; </div><div class="line">    dictEntry *he; </div><div class="line"> </div><div class="line">    /* 检查是否需要扩展哈希表，不足则扩展 */ </div><div class="line">    if (_dictExpandIfNeeded(d) == DICT_ERR)  </div><div class="line">        return -1; </div><div class="line">    /* 计算Key的哈希值 */ </div><div class="line">    h = dictHashKey(d, key); </div><div class="line">    for (table = 0; table &lt;= 1; table++) &#123; </div><div class="line">        idx = h &amp; d-&gt;ht[table].sizemask;  //计算Key的bucket位置</div><div class="line">        /* 检查节点上是否存在新增的Key */ </div><div class="line">        he = d-&gt;ht[table].table[idx]; </div><div class="line">        /* 在节点链表检查 */ </div><div class="line">        while(he) &#123; </div><div class="line">            if (key==he-&gt;key || dictCompareKeys(d, key, he-&gt;key)) </div><div class="line">                return -1; </div><div class="line">            he = he-&gt;next;</div><div class="line">        &#125; </div><div class="line">        if (!dictIsRehashing(d)) break;  // 扫完ht[0]后，如果哈希表不在rehashing，则无需再扫ht[1]</div><div class="line">    &#125; </div><div class="line">    return idx; </div><div class="line">&#125; </div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">/* 将Key插入哈希表 */</div><div class="line">dictEntry *dictAddRaw(dict *d, void *key) </div><div class="line">&#123; </div><div class="line">    int index; </div><div class="line">    dictEntry *entry; </div><div class="line">    dictht *ht; </div><div class="line"> </div><div class="line">    if (dictIsRehashing(d)) _dictRehashStep(d);  // 如果哈希表在rehashing，则执行单步rehash</div><div class="line"> </div><div class="line">    /* 调用_dictKeyIndex() 检查键是否存在，如果存在则返回NULL */ </div><div class="line">    if ((index = _dictKeyIndex(d, key)) == -1) </div><div class="line">        return NULL; </div><div class="line"> </div><div class="line"></div><div class="line">    ht = dictIsRehashing(d) ? &amp;d-&gt;ht[1] : &amp;d-&gt;ht[0]; </div><div class="line">    entry = zmalloc(sizeof(*entry));   // 为新增的节点分配内存</div><div class="line">    entry-&gt;next = ht-&gt;table[index];  //  将节点插入链表表头</div><div class="line">    ht-&gt;table[index] = entry;   // 更新节点和桶信息</div><div class="line">    ht-&gt;used++;    //  更新ht</div><div class="line"> </div><div class="line">    /* 设置新节点的键 */ </div><div class="line">    dictSetKey(d, entry, key); </div><div class="line">    return entry; </div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line">/* 添加新键值对 */</div><div class="line">int dictAdd(dict *d, void *key, void *val) </div><div class="line">&#123; </div><div class="line">    dictEntry *entry = dictAddRaw(d,key);  // 添加新键</div><div class="line"> </div><div class="line">    if (!entry) return DICT_ERR;  // 如果键存在，则返回失败</div><div class="line">    dictSetVal(d, entry, val);   // 键不存在，则设置节点值</div><div class="line">    return DICT_OK; </div><div class="line">&#125;</div><div class="line">继续dictExpand的源码实现：</div><div class="line"></div><div class="line">int dictExpand(dict *d, unsigned long size) </div><div class="line">&#123; </div><div class="line">    dictht n; // 新哈希表</div><div class="line">    unsigned long realsize = _dictNextPower(size);  // 计算扩展或缩放新哈希表的大小(调用下面函数_dictNextPower())</div><div class="line"> </div><div class="line">    /* 如果正在rehash或者新哈希表的大小小于现已使用，则返回error */ </div><div class="line">    if (dictIsRehashing(d) || d-&gt;ht[0].used &gt; size) </div><div class="line">        return DICT_ERR; </div><div class="line"> </div><div class="line">    /* 如果计算出哈希表size与现哈希表大小一样，也返回error */ </div><div class="line">    if (realsize == d-&gt;ht[0].size) return DICT_ERR; </div><div class="line"> </div><div class="line">    /* 初始化新哈希表 */ </div><div class="line">    n.size = realsize; </div><div class="line">    n.sizemask = realsize-1; </div><div class="line">    n.table = zcalloc(realsize*sizeof(dictEntry*));  // 为table指向dictEntry 分配内存</div><div class="line">    n.used = 0; </div><div class="line"> </div><div class="line">    /* 如果ht[0] 为空，则初始化ht[0]为当前键值对的哈希表 */ </div><div class="line">    if (d-&gt;ht[0].table == NULL) &#123; </div><div class="line">        d-&gt;ht[0] = n; </div><div class="line">        return DICT_OK; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    /* 如果ht[0]不为空，则初始化ht[1]为当前键值对的哈希表，并开启渐进式rehash模式 */ </div><div class="line">    d-&gt;ht[1] = n; </div><div class="line">    d-&gt;rehashidx = 0; </div><div class="line">    return DICT_OK; </div><div class="line">&#125;</div><div class="line">...</div><div class="line">static unsigned long _dictNextPower(unsigned long size) &#123; </div><div class="line">    unsigned long i = DICT_HT_INITIAL_SIZE;  // 哈希表的初始值：4</div><div class="line"> </div><div class="line"></div><div class="line">    if (size &gt;= LONG_MAX) return LONG_MAX; </div><div class="line">    /* 计算新哈希表的大小：第一个大于等于size的2的N 次方的数值 */</div><div class="line">    while(1) &#123; </div><div class="line">        if (i &gt;= size) </div><div class="line">            return i; </div><div class="line">        i *= 2; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>总结一下流程大致如下：</p><div align="center"><img src="https://github.com/nillyan/nillyan.github.io/blob/master/blog/4e1551b0.png?raw=true" width="50%" height="50%"></div><ol><li><p>为ht[1]哈希表分配空间，空间大小与ht[0]当前的键值对数量有关（ht[0].used属性）：</p><ul><li>如果是扩展，那么ht[1].size为第一个大于等于ht[0].used*2的N 次方的数值；</li><li>如果是收缩，那么ht[1].size为第一个大于等于ht[0].used的N 次方的数值。</li></ul></li><li>此时字典同时拥有ht[0],ht[1]两个hash表。此时将rehashidx的值设置为0，表示rehash正式开始。</li><li>将ht[0]在rehashidx索引上的所有节点rehash到ht[1],当此次操作结束时，更新rehashidx的值+1。</li><li>整个rehash期间，对字典的delete,find,update操作会在两个哈希表上进行（先在ht[0]上查找，当找不到时再去ht[1]上查找）。而对字典的insert操作将统一保存到ht[1]里面。</li><li>当ht[0]的全部节点都rehash到ht[1]时，交换ht[0]和ht[1]的指针，并将rehashidx设为-1。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;这篇笔记主要记录Redis字典结构的主要实现，hash过程-解决hash冲突的方式以及rehash的过程。&quot;&gt;&lt;a href=&quot;#这篇笔记主要记录Redis字典结构的主要实现，hash过程-解决hash冲突的方式以及rehash的过程。&quot; class=&quot;heade
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>new article ds</title>
    <link href="http://yoursite.com/2016/10/01/new-article/"/>
    <id>http://yoursite.com/2016/10/01/new-article/</id>
    <published>2016-10-01T15:36:07.000Z</published>
    <updated>2017-10-27T09:08:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法二</title>
    <link href="http://yoursite.com/2016/04/10/4-10/"/>
    <id>http://yoursite.com/2016/04/10/4-10/</id>
    <published>2016-04-10T13:48:23.000Z</published>
    <updated>2017-10-27T09:07:48.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="重拾算法" scheme="http://yoursite.com/tags/%E9%87%8D%E6%8B%BE%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法一</title>
    <link href="http://yoursite.com/2016/04/02/4-02-article/"/>
    <id>http://yoursite.com/2016/04/02/4-02-article/</id>
    <published>2016-04-02T14:08:07.000Z</published>
    <updated>2017-10-27T09:07:55.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="重拾算法" scheme="http://yoursite.com/tags/%E9%87%8D%E6%8B%BE%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
